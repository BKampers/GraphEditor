/*
 * Copyright Â© Bart Kampers
 */
package bka.graph.swing;

import java.awt.*;
import javax.swing.*;


class HistoryPanel extends javax.swing.JPanel {


    HistoryPanel() {
        initComponents();
        historyList.setCellRenderer(listCellRenderer);
    }


    void setDrawHistory(DrawHistory drawHistory) {
        if (this.drawHistory != null) {
            this.drawHistory.removeListener(drawHistoryListener);
        }
        this.drawHistory = drawHistory;
        drawHistory.addListener(drawHistoryListener);
        updateList();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        historyLabel = new java.awt.Label();
        historyScrollPane = new javax.swing.JScrollPane();
        historyList = new javax.swing.JList<>();

        historyLabel.setText("Draw History");

        historyScrollPane.setMinimumSize(new java.awt.Dimension(0, 0));
        historyScrollPane.setPreferredSize(new java.awt.Dimension(10, 10));

        historyList.setModel(listModel);
        historyList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        historyList.setEnabled(false);
        historyList.setRequestFocusEnabled(false);
        historyScrollPane.setViewportView(historyList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(historyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(historyScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(historyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(historyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        historyLabel.getAccessibleContext().setAccessibleName("label");
    }// </editor-fold>//GEN-END:initComponents


    private void updateList() {
        listModel.removeAllElements();
        for (Mutation mutation : drawHistory.getMutattions()) {
            listModel.addElement(mutation.getClass().getSimpleName());
        }
        int selectedIndex = drawHistory.getIndex() - 1;
        if (selectedIndex >= 0) {
            historyList.setSelectedIndex(selectedIndex);
        }
    }


    private final DefaultListCellRenderer listCellRenderer = new DefaultListCellRenderer() {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            Component renderer = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            if (isSelected) {
                renderer.setForeground(Color.WHITE);
            }
            else if (index < drawHistory.getIndex()) {
                renderer.setForeground(Color.BLACK);
            }
            else {
                renderer.setForeground(Color.GRAY);
            }
            return renderer;
        }

    };


    private final DrawHistory.Listener drawHistoryListener = new DrawHistory.Listener() {
        
        @Override
        public void historyChanged(DrawHistory drawHistory) {
            if (HistoryPanel.this.drawHistory == drawHistory) {
                updateList();
            }
        }

    };


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label historyLabel;
    private javax.swing.JList<String> historyList;
    private javax.swing.JScrollPane historyScrollPane;
    // End of variables declaration//GEN-END:variables

    private final DefaultListModel listModel = new DefaultListModel();

    private DrawHistory drawHistory;

}
